swagger: '2.0'
info:
  version: 0.0.1
  title: Pumpkin APIe
  termsOfService: 'https://tosdr.org/'
  contact:
    email: pies-n-loaf@fake.co
    url: 'https://github.com/pies-n-loaf/sample-api-docs'
  license:
    name: MIT
    url: 'https://github.com/pies-n-loaf/sample-api-docs/blob/main/LICENSE'
  x-logo:
    url: icons/pumpkin-api-logo.png
  description: "# Introduction\n\n<p class=\"larger\">The <strong>Pumpkin APIe</strong> is about pumpkins and pies and whatever else I feel like. It is also not real.</p>\n\nThis is a fake API specification written with OpenAPI v2.0 (Swagger) whose purpose is to test generating and hosting docs using Redocly and GitHub Pages, respectively. Pumpkin APIe is designed to be RESTful, have predictable resource-oriented URLs, and use standard HTTP response codes and terminology. It accepts and returns JSON-encoded payloads. Authentication is not a thing because this API doesn't actually exist.\n\nIn addition to Pumpkin APIe, I wrote a couple other APIs to test some different features:\n\n* [Closet API](closet.html)\n    > Experiments with a dark theme and aims to be the simplest approach with the least customization. Watch out for spiders.\n\n* [Fancy API](fancy.html)\n    > Uses OpenAPI v3 so that I can familiarize myself more with new features. Goes all out with the customization - dress-code is black tie only.\n\n<p>\n<img src=\"icons/favicon-16x16.png\" class=\"inline-icon\" />\n<small><a href=\"https://www.flaticon.com/free-icon/pie_1075840\" title=\"Pie\">Pumpkin pie icon</a> made by <a href=\"https://www.freepik.com\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a>.</small>\n</p>\n\n<mark>TODO: helpful links to resources</mark>\n\n# Authentication\n\nlol\n\n# Errors\n\nAll of these sample APIs (Pumpkin, Closet, Fancy) use conventional HTTP response codes, specifically following this standard: <mark>TODO</mark>. TL;DR:\n\n- **2xx response** = Success!\n    - `200` is a general success. You'll (hopefully) see this most often.\n    - `201` indicates a successful \"create\" action, typically the response for a POST.\n\n- **4xx response** = Client-side error _(aka You're the Problem TM)_\n    - `400` means the request wasn't understood. Check that you're using the right URL and look for typos.\n    - `401` means \"permission denied\" or \"unauthorized.\" Log in, ya dingus.\n    - `403` is also an auth error, but for authentication. Maybe you tried to bake a pie as a farmer, but only bakers should have access to the oven.\n    - `404` is a not found error. You knew this one.\n    - `409` is a conflict error. Maybe you tried to bake a pie that had already been baked by someone else - you couldn't take that specific action with that specific pie anymore, so the server was in conflict. (Might also be called a \"state error.\")\n    - `412` means \"precondition failed\" - an error specific to APIs that use Optimistic Locking/Concurrency Control. You can read more about that here. <mark>TODO</mark>\n    - `422` is an invalid input error. You tried to send a request with goofed up data in it.\n\n- **5xx response** = Server-side error _(I was the problem_ \U0001F61E _)_\n    - `500` means the server imploded for some reason. There are other error codes that pop up occasionally in other APIs, but this is the only one I'm using.\n\nSample `code line` and block:\n\n```javascript\nconst newVar = 20;\n```\n"
externalDocs:
  description: Read more about why this API reference exists and how to make your own.
  url: 'https://github.com/pies-n-loaf/sample-api-docs#sample-api-documentation'
schemes:
  - http
basePath: /apie
paths:
  /apples:
    get:
      summary: Get a list of apples.
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Apple'
  /apple-trees:
    get:
      summary: Get a list of apple trees.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AppleTrees'
  '/apple-trees/{appleTreeID}':
    parameters:
      - in: path
        name: appleTreeID
        type: string
        required: true
    get:
      summary: Get a specific apple tree.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AppleTree'
        '404':
          description: Couldn't find the apple tree.
    delete:
      summary: Delete a specific apple tree.
      responses:
        '200':
          description: OK
  /apple-wine-pairings:
    get:
      summary: Get a list of apples and their recommended wine pairings.
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              type: object
              properties:
                apple:
                  $ref: '#/definitions/Apple'
                wine:
                  type: string
  /farmers:
    post:
      summary: Create an apple farmer.
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Farmer'
      responses:
        '201':
          description: OK
          schema:
            $ref: '#/definitions/Farmer'
  '/farmers/{farmerID}':
    put:
      summary: Update a farmer.
      parameters:
        - in: path
          name: farmerID
          type: string
          required: true
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Farmer'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Farmer'
        '422':
          $ref: '#/responses/InvalidInput'
  /orchards:
    post:
      summary: Create an orchard of fruit trees.
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Orchard'
      responses:
        '201':
          description: OK
          schema:
            $ref: '#/definitions/Orchard'
  '/orchards/{orchardID}':
    patch:
      summary: Plant a tree in an orchard.
      parameters:
        - in: path
          name: orchardID
          type: string
          required: true
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Tree'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Orchard'
        '400':
          $ref: '#/responses/BadRequest'
definitions:
  Address:
    type: object
    properties:
      streetAddress1:
        type: string
      streetAddress2:
        type: string
      city:
        type: string
      state:
        type: string
      postalCode:
        type: string
        format: zip
        pattern: '^(\d{5}([\-]\d{4})?)$'
      country:
        type: string
        default: USA
    required:
      - streetAddress1
      - city
      - state
      - postalCode
  Apple:
    type: string
    enum:
      - Granny Smith
      - Red Delicious
      - Pink Lady
      - Braeburn
      - Fuji
      - Honeycrisp
  AppleTree:
    allOf:
      - $ref: '#/definitions/Tree'
      - type: object
        properties:
          apples:
            type: array
            items:
              $ref: '#/definitions/Apple'
        required:
          - apples
  AppleTrees:
    type: array
    items:
      $ref: '#/definitions/AppleTree'
  CherryTree:
    allOf:
      - $ref: '#/definitions/Tree'
      - type: object
        properties:
          cherryBunchSize:
            type: integer
            minimum: 1
            maximum: 3
            default: 2
          cherryTaste:
            type: string
            enum:
              - sweet
              - sour
  Error:
    type: object
    properties:
      message:
        type: string
  Farmer:
    type: object
    properties:
      id:
        type: string
        format: uuid
        readOnly: true
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
        format: email
      phone:
        type: string
        format: telephone
        pattern: '^[2-9]\d{2}-\d{3}-\d{4}$'
      favoriteDateTime:
        type: string
        format: date-time
      likesApples:
        type: boolean
    required:
      - firstName
  LemonTree:
    allOf:
      - $ref: '#/definitions/Tree'
      - type: object
        properties:
          goodForLemonade:
            type: boolean
  Orchard:
    type: object
    properties:
      id:
        type: string
        format: uuid
        readOnly: true
      address:
        $ref: '#/definitions/Address'
      farmer:
        $ref: '#/definitions/Farmer'
      trees:
        type: array
        items:
          $ref: '#/definitions/Tree'
        minItems: 1
        maxItems: 30
  PeachTree:
    allOf:
      - $ref: '#/definitions/Tree'
      - type: object
        properties:
          peaches:
            type: array
            items:
              type: string
              enum:
                - Donut
                - Not Donut
        required:
          - peaches
  Tree:
    type: object
    discriminator: treeType
    properties:
      id:
        type: string
        format: uuid
        readOnly: true
      datePlanted:
        type: string
        format: date
      timeMilitaryPlanted:
        type: string
        pattern: '\d{4}Z'
      treeType:
        type: string
        enum:
          - AppleTree
          - CherryTree
          - LemonTree
          - PeachTree
  Upload:
    type: object
    properties:
      bytes:
        type: integer
      contentType:
        type: string
        format: mime-type
        example: application/pdf
      filename:
        example: filename.pdf
        type: string
    required:
      - filename
      - contentType
      - bytes
  ValidationError:
    allOf:
      - $ref: '#/definitions/Error'
      - type: object
        properties:
          invalidFields:
            type: object
            additionalProperties:
              description: List of errors for the field
              type: array
              items:
                type: string
        required:
          - invalidFields
responses:
  BadRequest:
    description: The request was bad.
  InvalidInput:
    description: The input was invalid.
    schema:
      $ref: '#/definitions/ValidationError'
