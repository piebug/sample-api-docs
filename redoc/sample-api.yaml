swagger: '2.0'
info:
  version: 0.0.1
  title: Pumpkin APIe
  termsOfService: 'https://tosdr.org/'
  contact:
    email: pies-n-loaf@fake.co
    url: 'https://github.com/pies-n-loaf/sample-api-docs'
  license:
    name: MIT
    url: 'https://github.com/pies-n-loaf/sample-api-docs/blob/main/LICENSE'
  x-logo:
    url: >-
      https://raw.githubusercontent.com/pies-n-loaf/sample-api-docs/main/redoc/icons/pumpkin-api-logo.png
  description: "# Introduction\r\n\r\n<p class=\"larger\">The <strong>Pumpkin APIe</strong> is about pumpkins and pies and whatever else I feel like. It is also not real.</p>\r\n\r\nThis is a fake API specification used to test generating and hosting docs using Redocly and GitHub Pages, respectively. After the spec is fully bundled/compiled, I validate it using [Swagger Parser Online](https://apitools.dev/swagger-parser/online/) to ensure that the compiled spec could be used by various 3rd party tools. \r\n\r\nHere are the other sample APIs:\r\n* [Closet API](closet.html)\r\n* [Fancy API](fancy.html)\r\n\r\nSample `code line` and block:\r\n\r\n```javascript\r\nconst newVar = 20;\r\n```\r\n"
externalDocs:
  description: Read more about why this API specification exists and how to make your own.
  url: 'https://github.com/pies-n-loaf/sample-api-docs#sample-api-documentation'
schemes:
  - http
basePath: /pumpkin
paths:
  /apples:
    get:
      summary: Get a list of apples.
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Apple'
  /apple-trees:
    get:
      summary: Get a list of apple trees.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AppleTrees'
  '/apple-trees/{appleTreeID}':
    parameters:
      - in: path
        name: appleTreeID
        type: string
        required: true
    get:
      summary: Get a specific apple tree.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AppleTree'
        '404':
          description: Couldn't find the apple tree.
    delete:
      summary: Delete a specific apple tree.
      responses:
        '200':
          description: OK
  /apple-wine-pairings:
    get:
      summary: Get a list of apples and their recommended wine pairings.
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              type: object
              properties:
                apple:
                  $ref: '#/definitions/Apple'
                wine:
                  type: string
  /farmers:
    post:
      summary: Create an apple farmer.
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Farmer'
      responses:
        '201':
          description: OK
          schema:
            $ref: '#/definitions/Farmer'
  '/farmers/{farmerID}':
    put:
      summary: Update a farmer.
      parameters:
        - in: path
          name: farmerID
          type: string
          required: true
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Farmer'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Farmer'
        '422':
          $ref: '#/responses/InvalidInput'
  /orchards:
    post:
      summary: Create an orchard of fruit trees.
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Orchard'
      responses:
        '201':
          description: OK
          schema:
            $ref: '#/definitions/Orchard'
  '/orchards/{orchardID}':
    patch:
      summary: Plant a tree in an orchard.
      parameters:
        - in: path
          name: orchardID
          type: string
          required: true
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Tree'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Orchard'
        '400':
          $ref: '#/responses/BadRequest'
definitions:
  Address:
    type: object
    properties:
      streetAddress1:
        type: string
      streetAddress2:
        type: string
      city:
        type: string
      state:
        type: string
      postalCode:
        type: string
        format: zip
        pattern: '^(\d{5}([\-]\d{4})?)$'
      country:
        type: string
        default: USA
    required:
      - streetAddress1
      - city
      - state
      - postalCode
  Apple:
    type: string
    enum:
      - Granny Smith
      - Red Delicious
      - Pink Lady
      - Braeburn
      - Fuji
      - Honeycrisp
  AppleTree:
    allOf:
      - $ref: '#/definitions/Tree'
      - type: object
        properties:
          apples:
            type: array
            items:
              $ref: '#/definitions/Apple'
        required:
          - apples
  AppleTrees:
    type: array
    items:
      $ref: '#/definitions/AppleTree'
  CherryTree:
    allOf:
      - $ref: '#/definitions/Tree'
      - type: object
        properties:
          cherryBunchSize:
            type: integer
            minimum: 1
            maximum: 3
            default: 2
          cherryTaste:
            type: string
            enum:
              - sweet
              - sour
  Error:
    type: object
    properties:
      message:
        type: string
  Farmer:
    type: object
    properties:
      id:
        type: string
        format: uuid
        readOnly: true
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
        format: email
      phone:
        type: string
        format: telephone
        pattern: '^[2-9]\d{2}-\d{3}-\d{4}$'
      favoriteDateTime:
        type: string
        format: date-time
      likesApples:
        type: boolean
    required:
      - firstName
  LemonTree:
    allOf:
      - $ref: '#/definitions/Tree'
      - type: object
        properties:
          goodForLemonade:
            type: boolean
  Orchard:
    type: object
    properties:
      id:
        type: string
        format: uuid
        readOnly: true
      address:
        $ref: '#/definitions/Address'
      farmer:
        $ref: '#/definitions/Farmer'
      trees:
        type: array
        items:
          $ref: '#/definitions/Tree'
        minItems: 1
        maxItems: 30
  PeachTree:
    allOf:
      - $ref: '#/definitions/Tree'
      - type: object
        properties:
          peaches:
            type: array
            items:
              type: string
              enum:
                - Donut
                - Not Donut
        required:
          - peaches
  Tree:
    type: object
    discriminator: treeType
    properties:
      id:
        type: string
        format: uuid
        readOnly: true
      datePlanted:
        type: string
        format: date
      timeMilitaryPlanted:
        type: string
        pattern: '\d{4}Z'
      treeType:
        type: string
        enum:
          - AppleTree
          - CherryTree
          - LemonTree
          - PeachTree
  Upload:
    type: object
    properties:
      bytes:
        type: integer
      contentType:
        type: string
        format: mime-type
        example: application/pdf
      filename:
        example: filename.pdf
        type: string
    required:
      - filename
      - contentType
      - bytes
  ValidationError:
    allOf:
      - $ref: '#/definitions/Error'
      - type: object
        properties:
          invalidFields:
            type: object
            additionalProperties:
              description: List of errors for the field
              type: array
              items:
                type: string
        required:
          - invalidFields
responses:
  BadRequest:
    description: The request was bad.
  InvalidInput:
    description: The input was invalid.
    schema:
      $ref: '#/definitions/ValidationError'
